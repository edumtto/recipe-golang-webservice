// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/interface.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	http "net/http"
	reflect "reflect"

	domain "github.com/Edu15/recipe-golang-webservice/src/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FetchAuthor mocks base method.
func (m *MockRepository) FetchAuthor(ID int) (*domain.RecipeAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAuthor", ID)
	ret0, _ := ret[0].(*domain.RecipeAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAuthor indicates an expected call of FetchAuthor.
func (mr *MockRepositoryMockRecorder) FetchAuthor(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAuthor", reflect.TypeOf((*MockRepository)(nil).FetchAuthor), ID)
}

// FetchCategories mocks base method.
func (m *MockRepository) FetchCategories() (*[]domain.RecipeCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCategories")
	ret0, _ := ret[0].(*[]domain.RecipeCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCategories indicates an expected call of FetchCategories.
func (mr *MockRepositoryMockRecorder) FetchCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCategories", reflect.TypeOf((*MockRepository)(nil).FetchCategories))
}

// FetchCategory mocks base method.
func (m *MockRepository) FetchCategory(ID int) (*domain.RecipeCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCategory", ID)
	ret0, _ := ret[0].(*domain.RecipeCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCategory indicates an expected call of FetchCategory.
func (mr *MockRepositoryMockRecorder) FetchCategory(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCategory", reflect.TypeOf((*MockRepository)(nil).FetchCategory), ID)
}

// FetchDifficulties mocks base method.
func (m *MockRepository) FetchDifficulties() (*[]domain.RecipeDifficulty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDifficulties")
	ret0, _ := ret[0].(*[]domain.RecipeDifficulty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDifficulties indicates an expected call of FetchDifficulties.
func (mr *MockRepositoryMockRecorder) FetchDifficulties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDifficulties", reflect.TypeOf((*MockRepository)(nil).FetchDifficulties))
}

// FetchDifficulty mocks base method.
func (m *MockRepository) FetchDifficulty(ID int) (*domain.RecipeDifficulty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDifficulty", ID)
	ret0, _ := ret[0].(*domain.RecipeDifficulty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDifficulty indicates an expected call of FetchDifficulty.
func (mr *MockRepositoryMockRecorder) FetchDifficulty(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDifficulty", reflect.TypeOf((*MockRepository)(nil).FetchDifficulty), ID)
}

// FetchRecipe mocks base method.
func (m *MockRepository) FetchRecipe(recipeID int) (*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRecipe", recipeID)
	ret0, _ := ret[0].(*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRecipe indicates an expected call of FetchRecipe.
func (mr *MockRepositoryMockRecorder) FetchRecipe(recipeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRecipe", reflect.TypeOf((*MockRepository)(nil).FetchRecipe), recipeID)
}

// FetchRecipePreviews mocks base method.
func (m *MockRepository) FetchRecipePreviews() (*[]domain.RecipePreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRecipePreviews")
	ret0, _ := ret[0].(*[]domain.RecipePreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRecipePreviews indicates an expected call of FetchRecipePreviews.
func (mr *MockRepositoryMockRecorder) FetchRecipePreviews() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRecipePreviews", reflect.TypeOf((*MockRepository)(nil).FetchRecipePreviews))
}

// InsertRecipe mocks base method.
func (m *MockRepository) InsertRecipe(w http.ResponseWriter, r *http.Request) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecipe", w, r)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRecipe indicates an expected call of InsertRecipe.
func (mr *MockRepositoryMockRecorder) InsertRecipe(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecipe", reflect.TypeOf((*MockRepository)(nil).InsertRecipe), w, r)
}

// RemoveRecipe mocks base method.
func (m *MockRepository) RemoveRecipe(w http.ResponseWriter, r *http.Request, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRecipe", w, r, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRecipe indicates an expected call of RemoveRecipe.
func (mr *MockRepositoryMockRecorder) RemoveRecipe(w, r, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRecipe", reflect.TypeOf((*MockRepository)(nil).RemoveRecipe), w, r, id)
}

// UpdateRecipe mocks base method.
func (m *MockRepository) UpdateRecipe(w http.ResponseWriter, r *http.Request, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipe", w, r, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecipe indicates an expected call of UpdateRecipe.
func (mr *MockRepositoryMockRecorder) UpdateRecipe(w, r, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipe", reflect.TypeOf((*MockRepository)(nil).UpdateRecipe), w, r, id)
}

// MockRender is a mock of Render interface.
type MockRender struct {
	ctrl     *gomock.Controller
	recorder *MockRenderMockRecorder
}

// MockRenderMockRecorder is the mock recorder for MockRender.
type MockRenderMockRecorder struct {
	mock *MockRender
}

// NewMockRender creates a new mock instance.
func NewMockRender(ctrl *gomock.Controller) *MockRender {
	mock := &MockRender{ctrl: ctrl}
	mock.recorder = &MockRenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRender) EXPECT() *MockRenderMockRecorder {
	return m.recorder
}

// RenderNewRecipeForm mocks base method.
func (m *MockRender) RenderNewRecipeForm(w http.ResponseWriter, recipeForm *domain.RecipeForm) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderNewRecipeForm", w, recipeForm)
}

// RenderNewRecipeForm indicates an expected call of RenderNewRecipeForm.
func (mr *MockRenderMockRecorder) RenderNewRecipeForm(w, recipeForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderNewRecipeForm", reflect.TypeOf((*MockRender)(nil).RenderNewRecipeForm), w, recipeForm)
}

// RenderRecipe mocks base method.
func (m *MockRender) RenderRecipe(w http.ResponseWriter, recipe *domain.Recipe) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderRecipe", w, recipe)
}

// RenderRecipe indicates an expected call of RenderRecipe.
func (mr *MockRenderMockRecorder) RenderRecipe(w, recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderRecipe", reflect.TypeOf((*MockRender)(nil).RenderRecipe), w, recipe)
}

// RenderRecipeEditor mocks base method.
func (m *MockRender) RenderRecipeEditor(w http.ResponseWriter, recipeForm *domain.RecipeForm) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderRecipeEditor", w, recipeForm)
}

// RenderRecipeEditor indicates an expected call of RenderRecipeEditor.
func (mr *MockRenderMockRecorder) RenderRecipeEditor(w, recipeForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderRecipeEditor", reflect.TypeOf((*MockRender)(nil).RenderRecipeEditor), w, recipeForm)
}

// RenderRecipeList mocks base method.
func (m *MockRender) RenderRecipeList(w http.ResponseWriter, recipePreviews *[]domain.RecipePreview) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderRecipeList", w, recipePreviews)
}

// RenderRecipeList indicates an expected call of RenderRecipeList.
func (mr *MockRenderMockRecorder) RenderRecipeList(w, recipePreviews interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderRecipeList", reflect.TypeOf((*MockRender)(nil).RenderRecipeList), w, recipePreviews)
}
